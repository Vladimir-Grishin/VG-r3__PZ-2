
import numpy as np
import matplotlib.pyplot as plt
from tensorflow import keras
from tensorflow.keras.layers import Dense

#Создаём простейшую НС вычисления температуры tF от tC
c = np.array([-100, -10, 0, 10, 20, 30, 50, 100])   # исходные данные
f = np.array([-148, 14, 32, 50, 68, 86, 112, 212])

c_tst = np.array([-100, -80, -70, -50, 60, 70, 80, 90, 100])    # тестовый набор
f_tst = np.array([-148, -112, -94, -58, 140, 158, 176, 194, 212])

# создаём модель НС на одном нейроне
model = keras.Sequential()      
model.add(Dense(units=1, input_shape=(1,), activation='linear'))
model.compile(loss='mean_squared_error', optimizer=keras.optimizers.Adam(0.1))

#обучаем модель на 1000 эпохах, набор данных № 1
history = model.fit(c, f, epochs=1000, verbose=0)
print("Обучение завершено")

#проверяем обучение:
#по предсказанию значений, 
print("tC=100, tF=212 =>",model.predict([100]))
print("tC=-100, tF=-148 =>",model.predict([-100]))
print("tC=-80, tF=-112 =>",model.predict([-80]))

#проверяем параметры модели
print(model.get_weights())

#проверяем обучение не тестовом наборе
print(model.evaluate(c_tst, f_tst) )

#выводим график обучения 
plt.plot(history.history['loss'])
plt.grid(True)
plt.show()
'''
Взвешенная ошибка достаточно значительна, 3,42 
после 500-й эпохи практически стабилизируется на этом знвчении - см.график.
Обучение завершено
1/1 [==============================] - 0s 56ms/step
tC=100, tF=212 => [[209.22307]]
1/1 [==============================] - 0s 37ms/step
tC=-100, tF=-148 => [[-147.60658]]
1/1 [==============================] - 0s 34ms/step
tC=-80, tF=-112 => [[-111.923615]]
[array([[1.7841482]], dtype=float32), array([30.808247], dtype=float32)]
1/1 [==============================] - 0s 82ms/step - loss: 3.4259
3.4259448051452637
=============================>>>
Проводим дообучение модели на суженной тестовой выборке
'''
# исходные данные №2
c2 = np.array([-10, 0, 10, 20, 30,])
f2 = np.array([14, 32, 50, 68, 86])

#обучаем модель на 1000 эпохах на суженной выборке
history = model.fit(c2, f2, epochs=1000, verbose=0)
print("Обучение завершено")

#проверяем обучение:
print("tC=100, tF=212 =>",model.predict([100]))
print("tC=-100, tF=-148 =>",model.predict([-100]))
print("tC=-80, tF=-112 =>",model.predict([-80]))
print(model.get_weights())

print(model.evaluate(c_tst, f_tst) )

plt.plot(history.history['loss'])
plt.grid(True)
plt.show()

'''
Взвешенная ошибка резко уменьшилась, стала величиной в степерни порядка -6.
Значения, выдаваемые НС, - практически точные.

Т.е. методы обучения НС играют решающее значение.
Правильная работа по обучению даже простейшей НС даёт отличные праактические результаты.
Неправильная работа по обучению - даёт очень посредственный практичский результат.

Обучение завершено
1/1 [==============================] - 0s 51ms/step
tC=100, tF=212 => [[212.00107]]
1/1 [==============================] - 0s 60ms/step
tC=-100, tF=-148 => [[-148.00177]]
1/1 [==============================] - 0s 54ms/step
tC=-80, tF=-112 => [[-112.0015]]
[array([[1.8000143]], dtype=float32), array([31.999643], dtype=float32)]
1/1 [==============================] - 0s 38ms/step - loss: 1.2976e-06
1.2975716572327656e-06
'''
